// <auto-generated />
using System;
using Infrastructure.Shared.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250105202043_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Calendar.Entities.CalendarDayEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsWorkingDay")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("WorkEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WorkStartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CalendarDays");
                });

            modelBuilder.Entity("Infrastructure.Calendar.Entities.CalendarItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CalendarDayEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CalendarDayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ExternalItemType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RecurrenceEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RecurrenceInterval")
                        .HasColumnType("int");

                    b.Property<int?>("RecurrenceSelectedDays")
                        .HasColumnType("int");

                    b.Property<string>("RecurrenceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CalendarDayEntityId");

                    b.ToTable("CalendarItems");
                });

            modelBuilder.Entity("Infrastructure.Scheduling.Entities.TaskItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PriorityLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskItemStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DueDate");

                    b.HasIndex("TaskItemStatus");

                    b.HasIndex("StartDate", "EndDate")
                        .HasFilter("[StartDate] IS NOT NULL AND [EndDate] IS NOT NULL");

                    b.ToTable("TaskItems");
                });

            modelBuilder.Entity("Infrastructure.Calendar.Entities.CalendarItemEntity", b =>
                {
                    b.HasOne("Infrastructure.Calendar.Entities.CalendarDayEntity", null)
                        .WithMany("Reservations")
                        .HasForeignKey("CalendarDayEntityId");
                });

            modelBuilder.Entity("Infrastructure.Calendar.Entities.CalendarDayEntity", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
